version: '3.8'

services:
  mic_api:
    image: mintproject/mic-api
    ports:
      - 3001:3001
    depends_on:
      - ipython2mint_api
      - ipython2mint_worker
      - postgres

  ipython2mint_api:
    image: mintproject/ipython2mint-api
    ports:
      - 8004:8000
    command: uvicorn main:app --host 0.0.0.0 --reload
    depends_on:
      redis:
        condition: service_started
      dind:
        condition: service_healthy
    env_file:
      - .env-docker
    volumes:
      - dind-certs-client:/certs/client
      - logs:/var/log/stream
      - specs:/srv/specs
    networks:
      dind:
      default:
  #Celery worker
  ipython2mint_worker:
    image: mintproject/ipython2mint-worker
    command: celery worker --app=worker.celery --loglevel=info
    depends_on:
      redis:
        condition: service_started
      dind:
        condition: service_healthy
      ipython2mint_api:
        condition: service_started
    networks:
      dind:
      default:
    env_file:
      - .env-docker
    volumes:
      - dind-certs-client:/certs/client
      - logs:/usr/src/app/logs
      - specs:/usr/src/app/specs

  #Redis stores the celery status
  redis:
    image: redis:6-alpine

  #Database of MAT api
  postgres:
    image: postgres:13
    restart: always
    environment:
      - POSTGRES_PASSWORD=test
      - POSTGRES_USER=test
      - POSTGRES_DB=mat
    volumes:
        - db_data:/var/lib/postgresql/data

  #Docker Instance used by repo2docker
  dind:
    image: docker:dind
    container_name: dind
    restart: unless-stopped
    privileged: true
    volumes: 
      - dind-certs-ca:/certs/ca
      - dind-certs-client:/certs/client
    networks: 
      dind:
        aliases:
          - docker
    env_file:
      - .env-docker
    healthcheck:
      test: ["CMD", "docker", "system", "info"]
      interval: 1s
      timeout: 3s
      retries: 20
      
networks:
  dind:
  default:
    external:
      name: shared

volumes:
  dind-certs-ca:
  dind-certs-client:
  logs:
  specs:
  db_data: